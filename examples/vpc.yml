#! /usr/bin/env tacks run
name: tacks-vpc-example

defaults: &defaults
  delete_on_failure: true
  mode: upsert
  region: eu-west-1
  timeout: 60
  tags:
    Owner: JN
    Project: VPC Example
  variables:
    VPCCIDR: { constant: "172.21.0.0/21" }
    PublicAlphaSubnetCIDR: { constant: "172.21.0.0/21" }

environments:
  production:
    <<: *defaults
    ask: true
  staging:
    <<: *defaults

stack:
  {
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "{{ .Environment.Name }} VPC",
    "Outputs": {
      "VPC": {
        "Description": "VPCId of Service-VPC",
        "Value": {
          "Ref": "VPC"
        }
      },
      "PublicAlphaSubnetId": {
        "Description": "SubnetId of the public Alpha-AZ subnet in Service-VPC",
        "Value": {
          "Ref": "PublicAlphaSubnet"
        }
      },
      "InstanceProfile": {
        "Value": {
          "Ref": "InstanceProfile"
        }
      },
      "ServiceRole": {
        "Value": {
          "Ref": "ServiceRole"
        }
      }
    },
    "Parameters": {
      "Environment": {
        "Description": "Name of the environment for this VPC",
        "Type": "String",
        "Default": "{{ .Environment.Name }}",
        "AllowedPattern": "production|staging|sandbox[a-z-]*"
      },
      "VPCCIDR": {
        "Type": "String",
        "Description": "IP Address range for the VPN connected VPC",
        "MinLength": "9",
        "MaxLength": "18",
        "Default": "{{ .Variables.VPCCIDR }}",
        "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
      },
      "PublicAlphaSubnetCIDR": {
        "Type": "String",
        "Description": "IP Address range for the VPN connected Public Subnet in Alpha-AZ",
        "MinLength": "9",
        "MaxLength": "18",
        "Default": "{{ .Variables.PublicAlphaSubnetCIDR }}",
        "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
      }
    },
    "Resources": {
      "VPC": {
        "Type": "AWS::EC2::VPC",
        "Properties": {
          "EnableDnsSupport": "true",
          "EnableDnsHostnames": "true",
          "CidrBlock": {
            "Ref": "VPCCIDR"
          },
          "Tags": [
            {
              "Key": "Application",
              "Value": {
                "Ref": "AWS::StackName"
              }
            },
            {
              "Key": "Environment",
              "Value": {
                "Ref": "Environment"
              }
            }
          ]
        }
      },
      "PublicAlphaSubnet": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "VpcId": {
            "Ref": "VPC"
          },
          "CidrBlock": {
            "Ref": "PublicAlphaSubnetCIDR"
          },
          "AvailabilityZone": "{{ .Environment.Region }}a",
          "Tags": [
            {
              "Key": "Name",
              "Value": {
                "Fn::Join": [
                  "-",
                  [
                    {
                      "Ref": "Environment"
                    },
                    "public"
                  ]
                ]
              }
            },
            {
              "Key": "Environment",
              "Value": {
                "Ref": "Environment"
              }
            }
          ]
        }
      },
      "InternetGateway": {
        "Type": "AWS::EC2::InternetGateway",
        "Properties": {
          "Tags": [
            {
              "Key": "Name",
              "Value": {
                "Fn::Join": [
                  "-",
                  [
                    {
                      "Ref": "Environment"
                    },
                    "igw"
                  ]
                ]
              }
            },
            {
              "Key": "Environment",
              "Value": {
                "Ref": "Environment"
              }
            }
          ]
        }
      },
      "GatewayToInternet": {
        "Type": "AWS::EC2::VPCGatewayAttachment",
        "Properties": {
          "VpcId": {
            "Ref": "VPC"
          },
          "InternetGatewayId": {
            "Ref": "InternetGateway"
          }
        }
      },
      "PublicRouteTable": {
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
          "VpcId": {
            "Ref": "VPC"
          },
          "Tags": [
            {
              "Key": "Name",
              "Value": {
                "Fn::Join": [
                  "-",
                  [
                    {
                      "Ref": "Environment"
                    },
                    "public"
                  ]
                ]
              }
            },
            {
              "Key": "Environment",
              "Value": {
                "Ref": "Environment"
              }
            }
          ]
        }
      },
      "PublicRoute": {
        "Type": "AWS::EC2::Route",
        "DependsOn": "GatewayToInternet",
        "Properties": {
          "RouteTableId": {
            "Ref": "PublicRouteTable"
          },
          "DestinationCidrBlock": "0.0.0.0/0",
          "GatewayId": {
            "Ref": "InternetGateway"
          }
        }
      },
      "PublicAlphaSubnetRouteTableAssociation": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "SubnetId": {
            "Ref": "PublicAlphaSubnet"
          },
          "RouteTableId": {
            "Ref": "PublicRouteTable"
          }
        }
      },
      "PublicNetworkAcl": {
        "Type": "AWS::EC2::NetworkAcl",
        "Properties": {
          "VpcId": {
            "Ref": "VPC"
          },
          "Tags": [
            {
              "Key": "Name",
              "Value": {
                "Fn::Join": [
                  "-",
                  [
                    {
                      "Ref": "Environment"
                    },
                    "public"
                  ]
                ]
              }
            },
            {
              "Key": "Environment",
              "Value": {
                "Ref": "Environment"
              }
            }
          ]
        }
      },
      "InboundPublicNetworkAclEntry": {
        "Type": "AWS::EC2::NetworkAclEntry",
        "Properties": {
          "NetworkAclId": {
            "Ref": "PublicNetworkAcl"
          },
          "RuleNumber": "100",
          "Protocol": "-1",
          "RuleAction": "allow",
          "Egress": "false",
          "CidrBlock": "0.0.0.0/0"
        }
      },
      "OutBoundPublicNetworkAclEntry": {
        "Type": "AWS::EC2::NetworkAclEntry",
        "Properties": {
          "NetworkAclId": {
            "Ref": "PublicNetworkAcl"
          },
          "RuleNumber": "100",
          "Protocol": "-1",
          "RuleAction": "allow",
          "Egress": "true",
          "CidrBlock": "0.0.0.0/0"
        }
      },
      "PublicAlphaSubnetNetworkAclAssociation": {
        "Type": "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties": {
          "SubnetId": {
            "Ref": "PublicAlphaSubnet"
          },
          "NetworkAclId": {
            "Ref": "PublicNetworkAcl"
          }
        }
      },
      "ServiceRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "opsworks.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Path": "/",
          "Policies": [
            {
              "PolicyName": "service-role",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "cloudwatch:GetMetricStatistics",
                      "ec2:*",
                      "elasticloadbalancing:*",
                      "iam:PassRole"
                    ],
                    "Resource": "*"
                  }
                ]
              }
            }
          ]
        }
      },
      "InstanceRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "ec2.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Path": "/",
          "Policies": [
            {
              "PolicyName": "instance-role",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [ 
                      "cloudformation:DescribeStack*",
                      "cloudformation:ListStack*" 
                      ],
                    "Resource": "*"
                  },
                  {
                    "Effect": "Allow",
                    "Action": "ec2:Describe*",
                    "Resource": "*"
                  },
                  {
                    "Effect": "Allow",
                    "Action": [ "elasticache:Describe*",
                                "elasticache:List*"
                    ],
                    "Resource": "*"
                  }
                ]
              }
            }
          ]
        }
      },
      "InstanceProfile": {
        "Type": "AWS::IAM::InstanceProfile",
        "Properties": {
          "Path": "/",
          "Roles": [
            {
              "Ref": "InstanceRole"
            }
          ]
        }
      }
    }
  }
